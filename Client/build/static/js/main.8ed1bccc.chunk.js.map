{"version":3,"sources":["Login.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","loadingImages","react_default","a","createElement","Fragment","className","src","width","htmlFor","type","onChange","this","props","updateUsername","updatePassword","onClick","fetchData","concat","showLoading","hidden","alt","Component","Results","_this$props$student","student","name","results","Math","floor","random","length","map","item","i","key","courseName","attendance","reset","App","user","password","undefined","error","_this","setState","axios","post","then","res","data","err","event","target","value","closeMessage","src_Results","src_Login","style","textAlign","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8ed1bccc.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css'\n\nclass Login extends Component {\n\n    state = {\n        loadingImages: []\n    };\n\n    render() {\n        return (\n            <>\n                <section className={`nes-container with-title login-container`}>\n                    <h2 className=\"title\">Login Page</h2>\n                    <div className=\"containers\">\n\n                        <h6>Please Enter your info to see the attendance</h6>\n                        <div className={'wrapper'}>\n                            <img\n                                src=\"https://thumbs.gfycat.com/HopefulShockedBarracuda-small.gif\"\n                                width={150}/>\n                        </div>\n\n                        <div className=\"nes-field\">\n                            <label htmlFor=\"name_field\">Username</label>\n                            <input type=\"text\" onChange={this.props.updateUsername} className=\"nes-input\"/>\n\n                            <label htmlFor=\"name_field\">Password</label>\n                            <input type=\"password\" onChange={this.props.updatePassword} className=\"nes-input\"/>\n                        </div>\n\n                        <br/>\n\n                        <div className={'wrapper'}>\n                            <button type=\"button\" className=\"nes-btn\" onClick={this.props.fetchData}>Login</button>\n                        </div>\n                    </div>\n                </section>\n\n                <div className={`${this.props.showLoading ? 'overlay' : ''}`}/>\n\n                <section className=\"nes-container is-rounded loading-container\" hidden={!this.props.showLoading}>\n                    <h5>Loading</h5>\n                    <img src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/92b69c22219753.5630ea254987a.gif\"\n                         alt=\"\" width={160}/>\n                </section>\n            </>\n        );\n    }\n}\n\nexport default Login;\n","import React, {Component} from 'react';\nimport './App.css'\n\nclass Results extends Component {\n\n    loadingImages = [\n        'http://rs746.pbsrc.com/albums/xx106/Zukato-sama/1lg106Buzz.gif~c200',\n        'http://img.ifcdn.com/images/3e413c4dd0bbe140681f191854c39aaeee9c8b4aab9fa7e1151d4ad7e265c289_1.gif',\n        'http://rs794.pbsrc.com/albums/yy222/toystoryftw/Misc%20Toy%20Story/1385242ovj38uen07.gif~c200',\n        'https://www.gifmania.co.uk/Walt-Disney-Animated-Gifs/Animated-Pixar-Movies/Toy-Story/Buzz-Little-Green-Men-82984.gif',\n    ];\n\n    render() {\n        const {name, results} = this.props.student;\n        return (\n            <>\n                <section className=\"nes-container with-title login-container\">\n                    <h2 className=\"title\">Results</h2>\n                    <h6>Welcome {name}</h6>\n\n                    <div className={'wrapper'}>\n                        <img\n                            src={this.loadingImages[Math.floor(Math.random() * this.loadingImages.length)]}\n                            width={150}/>\n\n\n                        <div className=\"nes-table-responsive\">\n                            <table className=\"nes-table is-bordered is-centered\">\n                                <thead>\n                                <tr>\n                                    <th>Course</th>\n                                    <th>Hours</th>\n                                </tr>\n                                </thead>\n\n                                <tbody>\n                                {\n                                    results.map((item, i) =>\n                                        <tr key={i}>\n                                            <td>{item.courseName}</td>\n                                            <td>{item.attendance}</td>\n                                        </tr>\n                                    )\n                                }\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <br/>\n                    <br/>\n\n                    <div className={'wrapper'}>\n                        <button type=\"button\" className=\"nes-btn is-primary\" onClick={this.props.reset}>Return</button>\n                    </div>\n\n                </section>\n            </>\n        );\n    }\n}\n\nexport default Results;\n","import React, {Component} from 'react';\nimport './App.css';\nimport 'nes.css/css/nes.min.css'\n\nimport axios from 'axios';\nimport Login from \"./Login\";\nimport Results from \"./Results\";\n\n\nclass App extends Component {\n\n    state = {\n        user: '',\n        password: '',\n        showLoading: false,\n        student: undefined,\n        error: undefined,\n    };\n\n    fetchData = () => {\n        this.setState({showLoading: true});\n        axios.post(`http://localhost:4000`, {\n            user: this.state.user,\n            password: this.state.password\n        }).then(res => {\n            if (res.data.err)\n                this.setState({\n                    showLoading: false,\n                    error: res.data.err\n                });\n            else\n                this.setState({\n                    showLoading: false,\n                    student: res.data.res\n                });\n        });\n    };\n\n    updateUsername = (event) => this.setState({user: event.target.value});\n    updatePassword = (event) => this.setState({password: event.target.value});\n\n    closeMessage = () => this.setState({error: undefined});\n\n    reset = () => this.setState({student: undefined});\n\n    render() {\n        return (\n            <div className={`App`}>\n                {\n                    this.state.student ?\n                        <Results student={this.state.student}\n                                 reset={this.reset}\n                        />\n                        : <Login updateUsername={this.updateUsername}\n                                 updatePassword={this.updatePassword}\n                                 fetchData={this.fetchData}\n                                 showLoading={this.state.showLoading}/>\n\n                }\n\n                <div className=\"nes-balloon from-right message\" hidden={!this.state.error}>\n                    <p>\n                        {this.state.error}\n                        <img src=\"https://orig00.deviantart.net/f028/f/2014/221/5/4/signal_by_pavanz-d7uhv5q.gif\"\n                             width={100}/>\n                    </p>\n                    <div style={{textAlign: 'right'}}>\n                        <button type=\"button\" className=\"nes-btn is-error\" onClick={this.closeMessage}>X</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}